def astar(start, goal):
    open_list = pile()
    closed_list = set()

    # 초기 상태를 open_list에 추가
    open_list.fifo(start)

    while open_list.pile:
        current_state = open_list.pile.pop(0)  # open_list에서 가장 낮은 f값을 가진 상태를 선택
        closed_list.add(current_state.coords)  # 현재 상태를 closed_list에 추가

        if current_state.coords == goal.coords:
            # 목표 상태에 도달했을 때 경로를 반환
            path = []
            while current_state:
                path.insert(0, current_state.coords)
                current_state = current_state.prec
            return path

        # 현재 상태에서 이동 가능한 인접 상태를 찾아서 open_list에 추가
        neighbors = current_state.acc()
        for neighbor in neighbors:
            if neighbor.coords in closed_list:
                continue  # 이미 처리한 상태는 건너뜁니다.

            if neighbor not in open_list.pile:
                open_list.fifo(neighbor)  # 처음 발견한 상태는 open_list에 추가합니다.
            else:
                # 이미 open_list에 있는 상태인 경우, 더 낮은 g값으로 업데이트합니다.
                existing_neighbor = open_list.pile[open_list.pile.index(neighbor)]
                if neighbor.g < existing_neighbor.g:
                    existing_neighbor.g = neighbor.g
                    existing_neighbor.prec = neighbor.prec

    return None  # 목표 상태에 도달하지 못한 경우 None을 반환

# 시작 상태와 목표 상태를 설정
start = etat(coords=(2, 8))
goal = etat(coords=(9, 3))

# A* 알고리즘을 사용하여 최단 경로를 찾습니다.
path = astar(start, goal)

if path:
    print("최단 경로:", path)
else:
    print("최단 경로를 찾을 수 없습니다.")
